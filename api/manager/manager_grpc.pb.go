// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/manager/manager.proto

package manager

import (
	context "context"
	protocol "github.com/dollarkillerx/zim/api/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	// super admin
	SuperAdminCreate(ctx context.Context, in *protocol.Empty, opts ...grpc.CallOption) (*SuperAdmin, error)
	SuperAdminDel(ctx context.Context, in *SuperAdminId, opts ...grpc.CallOption) (*protocol.Empty, error)
	SuperAdminReset(ctx context.Context, in *SuperAdminId, opts ...grpc.CallOption) (*SuperAdmin, error)
	// project
	ProjectCreate(ctx context.Context, in *ProjectCreateRequest, opts ...grpc.CallOption) (*Project, error)
	ProjectDel(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*protocol.Empty, error)
	ProjectReset(ctx context.Context, in *ProjectResetRequest, opts ...grpc.CallOption) (*Project, error)
	// user
	UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*User, error)
	UserDel(ctx context.Context, in *User, opts ...grpc.CallOption) (*protocol.Empty, error)
	UserRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error)
	UserUnRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error)
	// group
	GroupCreate(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*Group, error)
	GroupDel(ctx context.Context, in *Group, opts ...grpc.CallOption) (*protocol.Empty, error)
	GroupUserRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error)
	GroupUserUnRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error)
	GroupDissolve(ctx context.Context, in *GroupDissolveRequest, opts ...grpc.CallOption) (*protocol.Empty, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) SuperAdminCreate(ctx context.Context, in *protocol.Empty, opts ...grpc.CallOption) (*SuperAdmin, error) {
	out := new(SuperAdmin)
	err := c.cc.Invoke(ctx, "/manager.Manager/SuperAdminCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SuperAdminDel(ctx context.Context, in *SuperAdminId, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/SuperAdminDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SuperAdminReset(ctx context.Context, in *SuperAdminId, opts ...grpc.CallOption) (*SuperAdmin, error) {
	out := new(SuperAdmin)
	err := c.cc.Invoke(ctx, "/manager.Manager/SuperAdminReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ProjectCreate(ctx context.Context, in *ProjectCreateRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/manager.Manager/ProjectCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ProjectDel(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/ProjectDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ProjectReset(ctx context.Context, in *ProjectResetRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/manager.Manager/ProjectReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/manager.Manager/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserDel(ctx context.Context, in *User, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/UserDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/UserRelevance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserUnRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/UserUnRelevance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GroupCreate(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/manager.Manager/GroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GroupDel(ctx context.Context, in *Group, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/GroupDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GroupUserRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/GroupUserRelevance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GroupUserUnRelevance(ctx context.Context, in *UserRelevanceRequest, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/GroupUserUnRelevance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GroupDissolve(ctx context.Context, in *GroupDissolveRequest, opts ...grpc.CallOption) (*protocol.Empty, error) {
	out := new(protocol.Empty)
	err := c.cc.Invoke(ctx, "/manager.Manager/GroupDissolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	// super admin
	SuperAdminCreate(context.Context, *protocol.Empty) (*SuperAdmin, error)
	SuperAdminDel(context.Context, *SuperAdminId) (*protocol.Empty, error)
	SuperAdminReset(context.Context, *SuperAdminId) (*SuperAdmin, error)
	// project
	ProjectCreate(context.Context, *ProjectCreateRequest) (*Project, error)
	ProjectDel(context.Context, *ProjectId) (*protocol.Empty, error)
	ProjectReset(context.Context, *ProjectResetRequest) (*Project, error)
	// user
	UserCreate(context.Context, *UserCreateRequest) (*User, error)
	UserDel(context.Context, *User) (*protocol.Empty, error)
	UserRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error)
	UserUnRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error)
	// group
	GroupCreate(context.Context, *GroupCreateRequest) (*Group, error)
	GroupDel(context.Context, *Group) (*protocol.Empty, error)
	GroupUserRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error)
	GroupUserUnRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error)
	GroupDissolve(context.Context, *GroupDissolveRequest) (*protocol.Empty, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) SuperAdminCreate(context.Context, *protocol.Empty) (*SuperAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdminCreate not implemented")
}
func (UnimplementedManagerServer) SuperAdminDel(context.Context, *SuperAdminId) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdminDel not implemented")
}
func (UnimplementedManagerServer) SuperAdminReset(context.Context, *SuperAdminId) (*SuperAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdminReset not implemented")
}
func (UnimplementedManagerServer) ProjectCreate(context.Context, *ProjectCreateRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectCreate not implemented")
}
func (UnimplementedManagerServer) ProjectDel(context.Context, *ProjectId) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectDel not implemented")
}
func (UnimplementedManagerServer) ProjectReset(context.Context, *ProjectResetRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectReset not implemented")
}
func (UnimplementedManagerServer) UserCreate(context.Context, *UserCreateRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedManagerServer) UserDel(context.Context, *User) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDel not implemented")
}
func (UnimplementedManagerServer) UserRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRelevance not implemented")
}
func (UnimplementedManagerServer) UserUnRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnRelevance not implemented")
}
func (UnimplementedManagerServer) GroupCreate(context.Context, *GroupCreateRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (UnimplementedManagerServer) GroupDel(context.Context, *Group) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDel not implemented")
}
func (UnimplementedManagerServer) GroupUserRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUserRelevance not implemented")
}
func (UnimplementedManagerServer) GroupUserUnRelevance(context.Context, *UserRelevanceRequest) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUserUnRelevance not implemented")
}
func (UnimplementedManagerServer) GroupDissolve(context.Context, *GroupDissolveRequest) (*protocol.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDissolve not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_SuperAdminCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SuperAdminCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/SuperAdminCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SuperAdminCreate(ctx, req.(*protocol.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SuperAdminDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperAdminId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SuperAdminDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/SuperAdminDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SuperAdminDel(ctx, req.(*SuperAdminId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SuperAdminReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperAdminId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SuperAdminReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/SuperAdminReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SuperAdminReset(ctx, req.(*SuperAdminId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ProjectCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ProjectCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/ProjectCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ProjectCreate(ctx, req.(*ProjectCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ProjectDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ProjectDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/ProjectDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ProjectDel(ctx, req.(*ProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ProjectReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ProjectReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/ProjectReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ProjectReset(ctx, req.(*ProjectResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserCreate(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/UserDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserDel(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserRelevance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelevanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserRelevance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/UserRelevance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserRelevance(ctx, req.(*UserRelevanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserUnRelevance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelevanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserUnRelevance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/UserUnRelevance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserUnRelevance(ctx, req.(*UserRelevanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GroupCreate(ctx, req.(*GroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GroupDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GroupDel(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GroupUserRelevance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelevanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GroupUserRelevance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GroupUserRelevance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GroupUserRelevance(ctx, req.(*UserRelevanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GroupUserUnRelevance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelevanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GroupUserUnRelevance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GroupUserUnRelevance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GroupUserUnRelevance(ctx, req.(*UserRelevanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GroupDissolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDissolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GroupDissolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GroupDissolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GroupDissolve(ctx, req.(*GroupDissolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuperAdminCreate",
			Handler:    _Manager_SuperAdminCreate_Handler,
		},
		{
			MethodName: "SuperAdminDel",
			Handler:    _Manager_SuperAdminDel_Handler,
		},
		{
			MethodName: "SuperAdminReset",
			Handler:    _Manager_SuperAdminReset_Handler,
		},
		{
			MethodName: "ProjectCreate",
			Handler:    _Manager_ProjectCreate_Handler,
		},
		{
			MethodName: "ProjectDel",
			Handler:    _Manager_ProjectDel_Handler,
		},
		{
			MethodName: "ProjectReset",
			Handler:    _Manager_ProjectReset_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _Manager_UserCreate_Handler,
		},
		{
			MethodName: "UserDel",
			Handler:    _Manager_UserDel_Handler,
		},
		{
			MethodName: "UserRelevance",
			Handler:    _Manager_UserRelevance_Handler,
		},
		{
			MethodName: "UserUnRelevance",
			Handler:    _Manager_UserUnRelevance_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _Manager_GroupCreate_Handler,
		},
		{
			MethodName: "GroupDel",
			Handler:    _Manager_GroupDel_Handler,
		},
		{
			MethodName: "GroupUserRelevance",
			Handler:    _Manager_GroupUserRelevance_Handler,
		},
		{
			MethodName: "GroupUserUnRelevance",
			Handler:    _Manager_GroupUserUnRelevance_Handler,
		},
		{
			MethodName: "GroupDissolve",
			Handler:    _Manager_GroupDissolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/manager/manager.proto",
}
